{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Chapter09",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iTvkAL1x7W_i"
      },
      "source": [
        "# Chapter09 텍스트를 위한 인공 신경망"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k0KWw9zk7a8o"
      },
      "source": [
        "### 09-1 순차 데이터와 순환 신경망"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KQfSrzr-7e8O"
      },
      "source": [
        "- 순차 데이터 : 텍스트나 시계열 데이터와 같이 순서에 의미가 있는 데이터\n",
        "\n",
        " - 시계열 데이터 : 일정간 시간 간격으로 기록된 데이터\n",
        "\n",
        " 순서가 중요하므로 '이전에' 입력한 데이터를 기억하는 기능이 필요하다\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Oi36GGwr9ff3"
      },
      "source": [
        "- 피드포워드 신경망 : 입력 데이터의 흐름이 앞으로만 전달되는 신경망\n",
        "\n",
        "- **순환 신경망** : 이전 데이터가 신경망 층에 순환되는 신경망 (완전 연결 신경망에 순환하는 고리가 추가됨)\n",
        "\n",
        " --> '이전 샘플에 대한 기억을 가지고 있다'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3gsbmSCqjrjY"
      },
      "source": [
        "### 09-2 순환 신경망으로 IMDB 리뷰 분류하기"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RWPShqwV_0fE"
      },
      "source": [
        "IMDB 리뷰 분류 :\n",
        "\n",
        "댓글을 긍정과 부정으로 분류하는 이진 분류"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fim5-Cj97Qsl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d10d8f7-486a-4868-ed01-91dd771da53f"
      },
      "source": [
        "# IMDB 리뷰 데이터셋 적재\n",
        "\n",
        "from tensorflow.keras.datasets import imdb\n",
        "(train_input, train_target), (test_input, test_target) = imdb.load_data(num_words=500)\n",
        "# num_words: 어휘사전에 저장할 단어의 개수 (500개의 단어만 저장할거다..)\n",
        "# 어휘사전에 단어가 없으면 2로 표현 (0은 패딩, 1은 문장의 시작을 의미)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n",
            "17465344/17464789 [==============================] - 0s 0us/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "<string>:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:155: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n",
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:156: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HYkgexp47jTB",
        "outputId": "a87c7890-c4cb-4b13-f384-445a9b488931"
      },
      "source": [
        "print(train_input.shape, test_input.shape)\n",
        "\n",
        "# 텍스트 길이가 제각각이기 때문에 리뷰마다 리스트로 담았다"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(25000,) (25000,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v860C9ZL7mVO",
        "outputId": "c5a55e30-0223-455b-f076-0d84678a756b"
      },
      "source": [
        "print(len(train_input[0]))   # 218개의 토큰으로 이루어져 있다\n",
        "print(len(train_input[1]))   # 189개 '' --> 각각 리뷰의 길이가 다름"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "218\n",
            "189\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "biwJaoqS-FDl",
        "outputId": "d5ef2287-17a4-41cd-bde2-591dd14777b3"
      },
      "source": [
        "print(train_target[:20])   # 타깃값 0(부정), 1(긍정)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 1 0 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GZ9gmBND_EP-"
      },
      "source": [
        "# 훈련세트, 검증세트 분리\n",
        "from sklearn.model_selection import train_test_split\n",
        "train_input, val_input, train_target, val_target = train_test_split(\n",
        "    train_input, train_target, test_size=0.2, random_state=42)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8SWawUWM_1gp"
      },
      "source": [
        "import numpy as np\n",
        "lengths = np.array([len(x) for x in train_input])"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "liclciU4ABfO",
        "outputId": "91f4e674-baa8-499a-bea3-ff2c82da0038"
      },
      "source": [
        "print(np.mean(lengths), np.median(lengths))   # 리뷰길이의 평균과 중간값"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "239.00925 178.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "joDONeX3COz8",
        "outputId": "a16a0464-1464-469e-ec58-55148da57ba4"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.hist(lengths)\n",
        "plt.xlabel('length')\n",
        "plt.ylabel('frequency')\n",
        "plt.show()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yof5RThCDgN7"
      },
      "source": [
        "이 예제에서는 100개의 단어만 사용할 것이다.\n",
        "\n",
        "--> 100개보다 작은 리뷰들의 길이를 맞추기 위해 '패딩'이 필요, ( 0으로 )\n",
        "\n",
        "100개보다 큰 리뷰들을 길이가 100이 되도록 잘라내야함"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SedcH9zHCYll"
      },
      "source": [
        "from tensorflow.keras.preprocessing.sequence import pad_sequences  # 시퀀스 데이터의 길이를 맞춰준다\n",
        "train_seq = pad_sequences(train_input, maxlen=100)  # 기본적으로 앞부분을 자르거나 추가"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nrNOw24eDXBE",
        "outputId": "b608b4a2-4514-4e9c-df26-e786e7f30ae8"
      },
      "source": [
        "print(train_seq.shape)  # 모든 데이터의 리뷰길이가 100이 되었다 --> 2차원 배열이 됨"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(20000, 100)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ojC5EqREEEFh",
        "outputId": "9afd5c2a-d310-4ecf-9a47-aa0546743e57"
      },
      "source": [
        "print(train_seq[0])"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[ 10   4  20   9   2 364 352   5  45   6   2   2  33 269   8   2 142   2\n",
            "   5   2  17  73  17 204   5   2  19  55   2   2  92  66 104  14  20  93\n",
            "  76   2 151  33   4  58  12 188   2 151  12 215  69 224 142  73 237   6\n",
            "   2   7   2   2 188   2 103  14  31  10  10 451   7   2   5   2  80  91\n",
            "   2  30   2  34  14  20 151  50  26 131  49   2  84  46  50  37  80  79\n",
            "   6   2  46   7  14  20  10  10 470 158]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wvVzVCkJEwL2",
        "outputId": "fc78ef9e-8e1a-41cb-9536-cf611db518b3"
      },
      "source": [
        "print(train_input[0][-10:])  # train_input[0]은 앞부분이 잘렸다"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[6, 2, 46, 7, 14, 20, 10, 10, 470, 158]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hnvGvrYiFJpj",
        "outputId": "df86fb7f-7189-4975-d53c-1d39ed5fc9d9"
      },
      "source": [
        "print(train_seq[5])  # train_seq[5]은 앞부분이 패딩되었다"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[  0   0   0   0   1   2 195  19  49   2   2 190   4   2 352   2 183  10\n",
            "  10  13  82  79   4   2  36  71 269   8   2  25  19  49   7   4   2   2\n",
            "   2   2   2  10  10  48  25  40   2  11   2   2  40   2   2   5   4   2\n",
            "   2  95  14 238  56 129   2  10  10  21   2  94 364 352   2   2  11 190\n",
            "  24 484   2   7  94 205 405  10  10  87   2  34  49   2   7   2   2   2\n",
            "   2   2 290   2  46  48  64  18   4   2]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tq252j0IFUIo"
      },
      "source": [
        "# 검증세트에도 길이 100으로 맞춰줘야 함\n",
        "val_seq = pad_sequences(val_input, maxlen=100)"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "84vLwb5zFXvg"
      },
      "source": [
        "# 순환 신경망 만들기\n",
        "from tensorflow import keras\n",
        "model = keras.Sequential()\n",
        "model.add(keras.layers.SimpleRNN(8, input_shape=(100, 500)))  # 각 리뷰의 길이가 100이고, 500개의 단어만 저장하니까 (100, 500)으로 받음\n",
        "                                                              # 원-핫 인코딩으로 바꿔 input에 넣어줘야 함\n",
        "                                                              # -> 단어와 그에 대응하는 정수에는 아무 관련이 없기 때문\n",
        "model.add(keras.layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tzSdlo7jno56"
      },
      "source": [
        "train_oh = keras.utils.to_categorical(train_seq)\n",
        "val_oh = keras.utils.to_categorical(val_seq)\n",
        "\n",
        "# keras.utils.to_categorical()에 정수형 배열을 입력하면 자동으로 원-핫 인코딩으로 변환해줌"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x5GaY_dMhFo-",
        "outputId": "57252337-b6b6-4ac0-8dfc-c303cb4d4803"
      },
      "source": [
        "print(train_oh.shape)\n",
        "print(train_oh[0][0][:12])\n",
        "print(np.sum(train_oh[0][0]))\n",
        "# 인코딩 잘됨"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(20000, 100, 500)\n",
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n",
            "1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FEgN1RXYhZeY",
        "outputId": "48d393be-e39c-44cd-9655-74f27019a498"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "simple_rnn (SimpleRNN)       (None, 8)                 4072      \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1)                 9         \n",
            "=================================================================\n",
            "Total params: 4,081\n",
            "Trainable params: 4,081\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uUFwUBMwiNoL",
        "outputId": "09d09599-d352-44a4-98b0-8955457405a3"
      },
      "source": [
        "# 순환신경망 학습하기\n",
        "rmsprop = keras.optimizers.RMSprop(learning_rate=1e-4)\n",
        "model.compile(optimizer=rmsprop, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-simplernn-model.h5')\n",
        "early_stopping_cb = keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True)\n",
        "history = model.fit(train_oh, train_target, epochs=100, batch_size=64,\n",
        "                    validation_data=(val_oh, val_target),\n",
        "                    callbacks=[checkpoint_cb, early_stopping_cb])"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 13s 37ms/step - loss: 0.7001 - accuracy: 0.4950 - val_loss: 0.6993 - val_accuracy: 0.4870\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.6956 - accuracy: 0.5068 - val_loss: 0.6958 - val_accuracy: 0.4982\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.6921 - accuracy: 0.5228 - val_loss: 0.6931 - val_accuracy: 0.5162\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.6889 - accuracy: 0.5380 - val_loss: 0.6902 - val_accuracy: 0.5306\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.6854 - accuracy: 0.5533 - val_loss: 0.6865 - val_accuracy: 0.5490\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.6802 - accuracy: 0.5735 - val_loss: 0.6792 - val_accuracy: 0.5788\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.6594 - accuracy: 0.6152 - val_loss: 0.6321 - val_accuracy: 0.6550\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.6165 - accuracy: 0.6704 - val_loss: 0.6058 - val_accuracy: 0.6854\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.5905 - accuracy: 0.6974 - val_loss: 0.5834 - val_accuracy: 0.7028\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.5686 - accuracy: 0.7208 - val_loss: 0.5655 - val_accuracy: 0.7180\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.5492 - accuracy: 0.7375 - val_loss: 0.5499 - val_accuracy: 0.7340\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.5335 - accuracy: 0.7485 - val_loss: 0.5412 - val_accuracy: 0.7358\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.5210 - accuracy: 0.7563 - val_loss: 0.5270 - val_accuracy: 0.7446\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.5093 - accuracy: 0.7649 - val_loss: 0.5209 - val_accuracy: 0.7484\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4993 - accuracy: 0.7715 - val_loss: 0.5099 - val_accuracy: 0.7572\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4904 - accuracy: 0.7763 - val_loss: 0.5062 - val_accuracy: 0.7610\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4833 - accuracy: 0.7796 - val_loss: 0.4994 - val_accuracy: 0.7648\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4758 - accuracy: 0.7867 - val_loss: 0.4948 - val_accuracy: 0.7656\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4696 - accuracy: 0.7901 - val_loss: 0.4910 - val_accuracy: 0.7694\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4651 - accuracy: 0.7926 - val_loss: 0.4881 - val_accuracy: 0.7710\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4598 - accuracy: 0.7950 - val_loss: 0.4827 - val_accuracy: 0.7736\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4562 - accuracy: 0.7976 - val_loss: 0.4803 - val_accuracy: 0.7704\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4524 - accuracy: 0.8012 - val_loss: 0.4811 - val_accuracy: 0.7728\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4497 - accuracy: 0.8016 - val_loss: 0.4791 - val_accuracy: 0.7762\n",
            "Epoch 25/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4471 - accuracy: 0.8033 - val_loss: 0.4732 - val_accuracy: 0.7782\n",
            "Epoch 26/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4436 - accuracy: 0.8047 - val_loss: 0.4736 - val_accuracy: 0.7796\n",
            "Epoch 27/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4412 - accuracy: 0.8063 - val_loss: 0.4705 - val_accuracy: 0.7814\n",
            "Epoch 28/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4395 - accuracy: 0.8078 - val_loss: 0.4689 - val_accuracy: 0.7790\n",
            "Epoch 29/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4371 - accuracy: 0.8097 - val_loss: 0.4688 - val_accuracy: 0.7810\n",
            "Epoch 30/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4352 - accuracy: 0.8094 - val_loss: 0.4746 - val_accuracy: 0.7770\n",
            "Epoch 31/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4338 - accuracy: 0.8094 - val_loss: 0.4642 - val_accuracy: 0.7834\n",
            "Epoch 32/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4319 - accuracy: 0.8108 - val_loss: 0.4629 - val_accuracy: 0.7846\n",
            "Epoch 33/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4307 - accuracy: 0.8134 - val_loss: 0.4695 - val_accuracy: 0.7792\n",
            "Epoch 34/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4291 - accuracy: 0.8130 - val_loss: 0.4641 - val_accuracy: 0.7828\n",
            "Epoch 35/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4272 - accuracy: 0.8137 - val_loss: 0.4611 - val_accuracy: 0.7836\n",
            "Epoch 36/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4263 - accuracy: 0.8135 - val_loss: 0.4590 - val_accuracy: 0.7836\n",
            "Epoch 37/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4256 - accuracy: 0.8140 - val_loss: 0.4619 - val_accuracy: 0.7830\n",
            "Epoch 38/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.4244 - accuracy: 0.8143 - val_loss: 0.4588 - val_accuracy: 0.7874\n",
            "Epoch 39/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4228 - accuracy: 0.8159 - val_loss: 0.4644 - val_accuracy: 0.7850\n",
            "Epoch 40/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4219 - accuracy: 0.8158 - val_loss: 0.4593 - val_accuracy: 0.7834\n",
            "Epoch 41/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4210 - accuracy: 0.8156 - val_loss: 0.4590 - val_accuracy: 0.7844\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "FZALXQ21kVa-",
        "outputId": "cc200250-8765-40a5-f865-7ff8b17d594d"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.legend(['train','val'])\n",
        "plt.show()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O8pt4SQlm-6i",
        "outputId": "5a35a157-b267-4b86-eb8b-20c02642aa06"
      },
      "source": [
        "print(train_seq.nbytes, train_oh.nbytes)\n",
        "print(train_oh.nbytes / train_seq.nbytes) # 원-핫 인코딩으로 변환한 데이터약 500정도 크다 --> 낭비"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "8000000 4000000000\n",
            "500.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k61yWbYAnWrb"
      },
      "source": [
        "단어 임베딩 :\n",
        "\n",
        "각 단어를 고정된 크기의 실수 벡터로 바꾸어준다.\n",
        "\n",
        "--> 원-핫 인코딩과는 달리 훨씬 작은 크기로도 단어를 잘 표현할 수 있다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NsjGLrZKnEJx"
      },
      "source": [
        "model2 = keras.Sequential()\n",
        "model2.add(keras.layers.Embedding(500, 16, input_length=100))\n",
        "model2.add(keras.layers.SimpleRNN(8))\n",
        "model2.add(keras.layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aVKgOazpqHRX",
        "outputId": "9530a64e-3b19-4ab2-9773-456911fb63df"
      },
      "source": [
        "model2.summary()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding (Embedding)        (None, 100, 16)           8000      \n",
            "_________________________________________________________________\n",
            "simple_rnn_1 (SimpleRNN)     (None, 8)                 200       \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 9         \n",
            "=================================================================\n",
            "Total params: 8,209\n",
            "Trainable params: 8,209\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QAHxJA0tqODc",
        "outputId": "eb88e605-72a9-4809-a8e1-a1bed5fa1e03"
      },
      "source": [
        "rmsprop = keras.optimizers.RMSprop(learning_rate=1e-4)\n",
        "model2.compile(optimizer=rmsprop, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-embedding-model.h5')\n",
        "early_stopping_cb = keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True)\n",
        "history = model2.fit(train_seq, train_target, epochs=100, batch_size=64,\n",
        "                     validation_data=(val_seq, val_target),\n",
        "                     callbacks=[checkpoint_cb, early_stopping_cb])"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 7s 20ms/step - loss: 0.6917 - accuracy: 0.5267 - val_loss: 0.6830 - val_accuracy: 0.5730\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.6733 - accuracy: 0.6101 - val_loss: 0.6663 - val_accuracy: 0.6322\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.6557 - accuracy: 0.6629 - val_loss: 0.6494 - val_accuracy: 0.6732\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.6367 - accuracy: 0.7012 - val_loss: 0.6331 - val_accuracy: 0.7040\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.6194 - accuracy: 0.7243 - val_loss: 0.6175 - val_accuracy: 0.7242\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.6021 - accuracy: 0.7408 - val_loss: 0.6016 - val_accuracy: 0.7370\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.5849 - accuracy: 0.7544 - val_loss: 0.5857 - val_accuracy: 0.7474\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.5687 - accuracy: 0.7668 - val_loss: 0.5735 - val_accuracy: 0.7494\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.5530 - accuracy: 0.7733 - val_loss: 0.5673 - val_accuracy: 0.7448\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 6s 21ms/step - loss: 0.5375 - accuracy: 0.7799 - val_loss: 0.5528 - val_accuracy: 0.7500\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.5220 - accuracy: 0.7851 - val_loss: 0.5380 - val_accuracy: 0.7544\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.5084 - accuracy: 0.7901 - val_loss: 0.5292 - val_accuracy: 0.7590\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.4953 - accuracy: 0.7957 - val_loss: 0.5153 - val_accuracy: 0.7656\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.4834 - accuracy: 0.7994 - val_loss: 0.5082 - val_accuracy: 0.7690\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.4721 - accuracy: 0.8033 - val_loss: 0.5024 - val_accuracy: 0.7686\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.4619 - accuracy: 0.8071 - val_loss: 0.4959 - val_accuracy: 0.7742\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.4540 - accuracy: 0.8088 - val_loss: 0.4923 - val_accuracy: 0.7712\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.4460 - accuracy: 0.8110 - val_loss: 0.4860 - val_accuracy: 0.7802\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.4389 - accuracy: 0.8142 - val_loss: 0.4835 - val_accuracy: 0.7812\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.4335 - accuracy: 0.8152 - val_loss: 0.4827 - val_accuracy: 0.7746\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.4284 - accuracy: 0.8166 - val_loss: 0.4827 - val_accuracy: 0.7752\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.4233 - accuracy: 0.8195 - val_loss: 0.4778 - val_accuracy: 0.7800\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 7s 21ms/step - loss: 0.4191 - accuracy: 0.8214 - val_loss: 0.4756 - val_accuracy: 0.7808\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 7s 21ms/step - loss: 0.4154 - accuracy: 0.8229 - val_loss: 0.4767 - val_accuracy: 0.7802\n",
            "Epoch 25/100\n",
            "313/313 [==============================] - 6s 21ms/step - loss: 0.4115 - accuracy: 0.8242 - val_loss: 0.4766 - val_accuracy: 0.7794\n",
            "Epoch 26/100\n",
            "313/313 [==============================] - 6s 21ms/step - loss: 0.4088 - accuracy: 0.8256 - val_loss: 0.4750 - val_accuracy: 0.7792\n",
            "Epoch 27/100\n",
            "313/313 [==============================] - 6s 20ms/step - loss: 0.4054 - accuracy: 0.8275 - val_loss: 0.4756 - val_accuracy: 0.7798\n",
            "Epoch 28/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.4028 - accuracy: 0.8271 - val_loss: 0.4745 - val_accuracy: 0.7810\n",
            "Epoch 29/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.4000 - accuracy: 0.8299 - val_loss: 0.4731 - val_accuracy: 0.7822\n",
            "Epoch 30/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.3970 - accuracy: 0.8310 - val_loss: 0.4750 - val_accuracy: 0.7826\n",
            "Epoch 31/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.3949 - accuracy: 0.8316 - val_loss: 0.4760 - val_accuracy: 0.7786\n",
            "Epoch 32/100\n",
            "313/313 [==============================] - 6s 19ms/step - loss: 0.3928 - accuracy: 0.8329 - val_loss: 0.4757 - val_accuracy: 0.7818\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "iHOEXVYNrLgN",
        "outputId": "90b52baa-0f2a-4e06-b72c-016a586816a2"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.legend(['train', 'val'])\n",
        "plt.show()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nIrqpaKusdrj"
      },
      "source": [
        "### 09-3 LSTM과 GRU 셀"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jZSim319z8Rp"
      },
      "source": [
        "기본 RNN은 긴 시퀀스를 학습하기 어렵다. --> ( 시퀀스가 갈수록 순환되는 은닉 상태에 담긴 정보가 점차 희석되기 때문 )\n",
        "\n",
        "- LSTM : 단기 기억을 오래 기억하기 위해 고안되었음\n",
        "\n",
        " 1. 은닉 상태\n",
        " \n",
        " 2. 셀 상태 : 다음 층으로 전달되지 않고 LSTM 셀에서 순환만 되는 값"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ysSUclJarsjB",
        "outputId": "0d934815-243c-43a1-b743-08020f12844f"
      },
      "source": [
        "# LSTM 신경망 훈련하기\n",
        "from tensorflow.keras.datasets import imdb\n",
        "from sklearn.model_selection import train_test_split\n",
        "(train_input, train_target), (test_input, test_target) = imdb.load_data(num_words=500)\n",
        "train_input, val_input, train_target, val_target = train_test_split(\n",
        "# train_input, train_target, test_size=0.2, random_state=42)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<string>:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:155: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n",
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:156: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_etHGu0t1a-A"
      },
      "source": [
        "# 샘플 길이 100으로 맞추기\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "train_seq = pad_sequences(train_input, maxlen=100)\n",
        "val_seq = pad_sequences(val_input, maxlen=100)"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T96vaDkz1ueT"
      },
      "source": [
        "# 순환층 생성\n",
        "from tensorflow import keras\n",
        "model = keras.Sequential()\n",
        "model.add(keras.layers.Embedding(500, 16, input_length=100))\n",
        "model.add(keras.layers.LSTM(8))\n",
        "model.add(keras.layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "li0DftVX2Fl0",
        "outputId": "5aabffe0-5e03-4142-f8bb-8350b9f14673"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_2 (Embedding)      (None, 100, 16)           8000      \n",
            "_________________________________________________________________\n",
            "lstm (LSTM)                  (None, 8)                 800       \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 1)                 9         \n",
            "=================================================================\n",
            "Total params: 8,809\n",
            "Trainable params: 8,809\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zf7kTUvA2Gnj",
        "outputId": "d81829c4-2d39-4985-a4c5-834ff528c338"
      },
      "source": [
        "# 모델 컴파일, 훈련\n",
        "rmsprop = keras.optimizers.RMSprop(learning_rate=1e-4)\n",
        "model.compile(optimizer=rmsprop, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-lstm-model.h5')\n",
        "early_stopping_cb = keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True)\n",
        "history = model.fit(train_seq, train_target, epochs=100, batch_size=64,\n",
        "                    validation_data=(val_seq, val_target),\n",
        "                    callbacks=[checkpoint_cb, early_stopping_cb])\n",
        "\n",
        "# 기본 RNN보다 LSTM이 과대적합을 억제하면서 훈련을 잘 수행한 것으로 보임"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 14s 39ms/step - loss: 0.6919 - accuracy: 0.5419 - val_loss: 0.6903 - val_accuracy: 0.5876\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.6876 - accuracy: 0.6094 - val_loss: 0.6847 - val_accuracy: 0.6280\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.6783 - accuracy: 0.6452 - val_loss: 0.6716 - val_accuracy: 0.6582\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.6536 - accuracy: 0.6773 - val_loss: 0.6297 - val_accuracy: 0.6898\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.5833 - accuracy: 0.7242 - val_loss: 0.5647 - val_accuracy: 0.7376\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.5416 - accuracy: 0.7521 - val_loss: 0.5335 - val_accuracy: 0.7576\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.5166 - accuracy: 0.7671 - val_loss: 0.5112 - val_accuracy: 0.7650\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4962 - accuracy: 0.7757 - val_loss: 0.4953 - val_accuracy: 0.7722\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4802 - accuracy: 0.7851 - val_loss: 0.4815 - val_accuracy: 0.7794\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4670 - accuracy: 0.7894 - val_loss: 0.4708 - val_accuracy: 0.7852\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4564 - accuracy: 0.7953 - val_loss: 0.4623 - val_accuracy: 0.7876\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4474 - accuracy: 0.8001 - val_loss: 0.4566 - val_accuracy: 0.7898\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4406 - accuracy: 0.8026 - val_loss: 0.4538 - val_accuracy: 0.7878\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4351 - accuracy: 0.8056 - val_loss: 0.4478 - val_accuracy: 0.7944\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4314 - accuracy: 0.8075 - val_loss: 0.4443 - val_accuracy: 0.7950\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4276 - accuracy: 0.8095 - val_loss: 0.4445 - val_accuracy: 0.7976\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4253 - accuracy: 0.8097 - val_loss: 0.4408 - val_accuracy: 0.7982\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4229 - accuracy: 0.8105 - val_loss: 0.4390 - val_accuracy: 0.7984\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4210 - accuracy: 0.8120 - val_loss: 0.4373 - val_accuracy: 0.7976\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4197 - accuracy: 0.8120 - val_loss: 0.4368 - val_accuracy: 0.7970\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4178 - accuracy: 0.8135 - val_loss: 0.4356 - val_accuracy: 0.7986\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.4165 - accuracy: 0.8148 - val_loss: 0.4357 - val_accuracy: 0.7968\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4155 - accuracy: 0.8122 - val_loss: 0.4378 - val_accuracy: 0.7932\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4144 - accuracy: 0.8141 - val_loss: 0.4390 - val_accuracy: 0.7958\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "jw1ni2iR29le",
        "outputId": "899ebbd8-39d0-443d-b7b3-6237846da225"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.legend(['train', 'val'])\n",
        "plt.show()"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PADbNZop3543"
      },
      "source": [
        "순환층에 드롭아웃 적용하기\n",
        "\n",
        "- dropout : 셀의 입력에 드롭아웃 적용\n",
        "\n",
        "- recurrent_dropout : 순환되는 은닉상태에 드롭아웃 적용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c0G4XBSC3LvG"
      },
      "source": [
        "model2 = keras.Sequential()\n",
        "model2.add(keras.layers.Embedding(500, 16, input_length=100))\n",
        "model2.add(keras.layers.LSTM(8, dropout=0.3))\n",
        "model2.add(keras.layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cGgwnovK4evM",
        "outputId": "882358f0-535f-4ae8-8fad-f932c9bca4b1"
      },
      "source": [
        "# 모델 컴파일, 훈련\n",
        "rmsprop = keras.optimizers.RMSprop(learning_rate=1e-4)\n",
        "model2.compile(optimizer=rmsprop, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-dropout-model.h5')\n",
        "early_stopping_cb = keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True)\n",
        "history = model2.fit(train_seq, train_target, epochs=100, batch_size=64,\n",
        "                    validation_data=(val_seq, val_target),\n",
        "                    callbacks=[checkpoint_cb, early_stopping_cb])\n",
        "\n",
        "# 드롭아웃이 효과를 잘 발휘해서 과대적합을 억제했다 (검증손실이 조금 향상되었음)"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 14s 40ms/step - loss: 0.6920 - accuracy: 0.5357 - val_loss: 0.6908 - val_accuracy: 0.5686\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.6881 - accuracy: 0.6108 - val_loss: 0.6854 - val_accuracy: 0.6100\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.6773 - accuracy: 0.6507 - val_loss: 0.6650 - val_accuracy: 0.6946\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.6294 - accuracy: 0.7087 - val_loss: 0.5963 - val_accuracy: 0.7294\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.5858 - accuracy: 0.7243 - val_loss: 0.5793 - val_accuracy: 0.7372\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.5683 - accuracy: 0.7376 - val_loss: 0.5599 - val_accuracy: 0.7484\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.5500 - accuracy: 0.7516 - val_loss: 0.5472 - val_accuracy: 0.7496\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.5347 - accuracy: 0.7610 - val_loss: 0.5315 - val_accuracy: 0.7676\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.5225 - accuracy: 0.7645 - val_loss: 0.5158 - val_accuracy: 0.7706\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.5079 - accuracy: 0.7720 - val_loss: 0.5038 - val_accuracy: 0.7792\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4949 - accuracy: 0.7793 - val_loss: 0.4916 - val_accuracy: 0.7826\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4852 - accuracy: 0.7813 - val_loss: 0.4807 - val_accuracy: 0.7834\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.4712 - accuracy: 0.7888 - val_loss: 0.4715 - val_accuracy: 0.7870\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4641 - accuracy: 0.7887 - val_loss: 0.4637 - val_accuracy: 0.7886\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4561 - accuracy: 0.7955 - val_loss: 0.4563 - val_accuracy: 0.7914\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4498 - accuracy: 0.7948 - val_loss: 0.4518 - val_accuracy: 0.7940\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4426 - accuracy: 0.7984 - val_loss: 0.4465 - val_accuracy: 0.7934\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4378 - accuracy: 0.8046 - val_loss: 0.4446 - val_accuracy: 0.7950\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4343 - accuracy: 0.8033 - val_loss: 0.4412 - val_accuracy: 0.7978\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4325 - accuracy: 0.8033 - val_loss: 0.4390 - val_accuracy: 0.7962\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4286 - accuracy: 0.8050 - val_loss: 0.4361 - val_accuracy: 0.8002\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.4253 - accuracy: 0.8062 - val_loss: 0.4355 - val_accuracy: 0.7968\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4249 - accuracy: 0.8076 - val_loss: 0.4333 - val_accuracy: 0.8000\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4256 - accuracy: 0.8062 - val_loss: 0.4325 - val_accuracy: 0.8006\n",
            "Epoch 25/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4232 - accuracy: 0.8072 - val_loss: 0.4324 - val_accuracy: 0.7980\n",
            "Epoch 26/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4206 - accuracy: 0.8079 - val_loss: 0.4340 - val_accuracy: 0.8034\n",
            "Epoch 27/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4200 - accuracy: 0.8083 - val_loss: 0.4307 - val_accuracy: 0.8006\n",
            "Epoch 28/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4176 - accuracy: 0.8109 - val_loss: 0.4303 - val_accuracy: 0.8010\n",
            "Epoch 29/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4154 - accuracy: 0.8116 - val_loss: 0.4320 - val_accuracy: 0.8032\n",
            "Epoch 30/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4165 - accuracy: 0.8099 - val_loss: 0.4298 - val_accuracy: 0.8028\n",
            "Epoch 31/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4155 - accuracy: 0.8102 - val_loss: 0.4294 - val_accuracy: 0.8040\n",
            "Epoch 32/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4144 - accuracy: 0.8111 - val_loss: 0.4287 - val_accuracy: 0.8014\n",
            "Epoch 33/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4143 - accuracy: 0.8103 - val_loss: 0.4284 - val_accuracy: 0.8024\n",
            "Epoch 34/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4150 - accuracy: 0.8090 - val_loss: 0.4288 - val_accuracy: 0.8002\n",
            "Epoch 35/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4128 - accuracy: 0.8118 - val_loss: 0.4277 - val_accuracy: 0.7994\n",
            "Epoch 36/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.4128 - accuracy: 0.8130 - val_loss: 0.4277 - val_accuracy: 0.8000\n",
            "Epoch 37/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4118 - accuracy: 0.8123 - val_loss: 0.4302 - val_accuracy: 0.8044\n",
            "Epoch 38/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 0.4113 - accuracy: 0.8099 - val_loss: 0.4271 - val_accuracy: 0.8014\n",
            "Epoch 39/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.4100 - accuracy: 0.8102 - val_loss: 0.4287 - val_accuracy: 0.7982\n",
            "Epoch 40/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4101 - accuracy: 0.8127 - val_loss: 0.4277 - val_accuracy: 0.8022\n",
            "Epoch 41/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4076 - accuracy: 0.8123 - val_loss: 0.4267 - val_accuracy: 0.8036\n",
            "Epoch 42/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4085 - accuracy: 0.8130 - val_loss: 0.4259 - val_accuracy: 0.8012\n",
            "Epoch 43/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4088 - accuracy: 0.8121 - val_loss: 0.4275 - val_accuracy: 0.7990\n",
            "Epoch 44/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4057 - accuracy: 0.8141 - val_loss: 0.4280 - val_accuracy: 0.7974\n",
            "Epoch 45/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4069 - accuracy: 0.8145 - val_loss: 0.4254 - val_accuracy: 0.8040\n",
            "Epoch 46/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4063 - accuracy: 0.8130 - val_loss: 0.4258 - val_accuracy: 0.8032\n",
            "Epoch 47/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4073 - accuracy: 0.8122 - val_loss: 0.4249 - val_accuracy: 0.8030\n",
            "Epoch 48/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 0.4066 - accuracy: 0.8139 - val_loss: 0.4283 - val_accuracy: 0.8032\n",
            "Epoch 49/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 0.4054 - accuracy: 0.8159 - val_loss: 0.4261 - val_accuracy: 0.8040\n",
            "Epoch 50/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 0.4036 - accuracy: 0.8149 - val_loss: 0.4289 - val_accuracy: 0.8034\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "Qdirp4Ud4mAO",
        "outputId": "5ca7b825-9b7f-4c9d-896a-6b88226224ee"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.legend(['train', 'val'])\n",
        "plt.show()"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4H_0VTEg5SPI"
      },
      "source": [
        "2개의 층 연결하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2Yi_P2MP48z2"
      },
      "source": [
        "model3 = keras.Sequential()\n",
        "model3.add(keras.layers.Embedding(500, 16, input_length=100))\n",
        "model3.add(keras.layers.LSTM(8, dropout=0.3, return_sequences=True))\n",
        "model3.add(keras.layers.LSTM(8, dropout=0.3))   # 순환층 2개 연결하기\n",
        "model3.add(keras.layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QuXghZMD6L7h",
        "outputId": "52d81d7c-ee0b-4b1f-d305-2d0fbb7b2be6"
      },
      "source": [
        "model3.summary()"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_7\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_6 (Embedding)      (None, 100, 16)           8000      \n",
            "_________________________________________________________________\n",
            "lstm_4 (LSTM)                (None, 100, 8)            800       \n",
            "_________________________________________________________________\n",
            "lstm_5 (LSTM)                (None, 8)                 544       \n",
            "_________________________________________________________________\n",
            "dense_7 (Dense)              (None, 1)                 9         \n",
            "=================================================================\n",
            "Total params: 9,353\n",
            "Trainable params: 9,353\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y2cTNqvd6M07",
        "outputId": "ce6dd264-6db8-4b9d-ea8e-a716233595c8"
      },
      "source": [
        "# 모델 컴파일, 훈련\n",
        "rmsprop = keras.optimizers.RMSprop(learning_rate=1e-4)\n",
        "model3.compile(optimizer=rmsprop, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-2rnn-model.h5')\n",
        "early_stopping_cb = keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True)\n",
        "history = model3.fit(train_seq, train_target, epochs=100, batch_size=64,\n",
        "                    validation_data=(val_seq, val_target),\n",
        "                    callbacks=[checkpoint_cb, early_stopping_cb])"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 26s 73ms/step - loss: 0.6929 - accuracy: 0.5132 - val_loss: 0.6925 - val_accuracy: 0.5348\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.6907 - accuracy: 0.5925 - val_loss: 0.6883 - val_accuracy: 0.6110\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.6767 - accuracy: 0.6219 - val_loss: 0.6533 - val_accuracy: 0.6486\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.6047 - accuracy: 0.7068 - val_loss: 0.5724 - val_accuracy: 0.7306\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 22s 70ms/step - loss: 0.5555 - accuracy: 0.7398 - val_loss: 0.5368 - val_accuracy: 0.7462\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.5243 - accuracy: 0.7560 - val_loss: 0.5123 - val_accuracy: 0.7572\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.5019 - accuracy: 0.7674 - val_loss: 0.4927 - val_accuracy: 0.7694\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 22s 69ms/step - loss: 0.4890 - accuracy: 0.7734 - val_loss: 0.4813 - val_accuracy: 0.7774\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.4798 - accuracy: 0.7793 - val_loss: 0.4731 - val_accuracy: 0.7828\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.4729 - accuracy: 0.7843 - val_loss: 0.4680 - val_accuracy: 0.7860\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 22s 71ms/step - loss: 0.4629 - accuracy: 0.7883 - val_loss: 0.4612 - val_accuracy: 0.7862\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.4597 - accuracy: 0.7901 - val_loss: 0.4584 - val_accuracy: 0.7868\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 22s 71ms/step - loss: 0.4533 - accuracy: 0.7937 - val_loss: 0.4570 - val_accuracy: 0.7892\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 22s 70ms/step - loss: 0.4491 - accuracy: 0.7958 - val_loss: 0.4514 - val_accuracy: 0.7936\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.4481 - accuracy: 0.7965 - val_loss: 0.4493 - val_accuracy: 0.7922\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 22s 71ms/step - loss: 0.4439 - accuracy: 0.7990 - val_loss: 0.4524 - val_accuracy: 0.7904\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 22s 70ms/step - loss: 0.4438 - accuracy: 0.7990 - val_loss: 0.4472 - val_accuracy: 0.7954\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.4414 - accuracy: 0.7988 - val_loss: 0.4436 - val_accuracy: 0.7950\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.4370 - accuracy: 0.8030 - val_loss: 0.4421 - val_accuracy: 0.7962\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 23s 74ms/step - loss: 0.4370 - accuracy: 0.7993 - val_loss: 0.4413 - val_accuracy: 0.7946\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 22s 71ms/step - loss: 0.4341 - accuracy: 0.7998 - val_loss: 0.4400 - val_accuracy: 0.7962\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.4346 - accuracy: 0.8020 - val_loss: 0.4404 - val_accuracy: 0.7990\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 23s 74ms/step - loss: 0.4328 - accuracy: 0.8047 - val_loss: 0.4389 - val_accuracy: 0.7990\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 22s 72ms/step - loss: 0.4322 - accuracy: 0.8040 - val_loss: 0.4407 - val_accuracy: 0.7958\n",
            "Epoch 25/100\n",
            "313/313 [==============================] - 23s 74ms/step - loss: 0.4320 - accuracy: 0.8037 - val_loss: 0.4420 - val_accuracy: 0.8002\n",
            "Epoch 26/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.4285 - accuracy: 0.8058 - val_loss: 0.4369 - val_accuracy: 0.8000\n",
            "Epoch 27/100\n",
            "313/313 [==============================] - 22s 70ms/step - loss: 0.4298 - accuracy: 0.8065 - val_loss: 0.4379 - val_accuracy: 0.8018\n",
            "Epoch 28/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.4270 - accuracy: 0.8075 - val_loss: 0.4361 - val_accuracy: 0.8012\n",
            "Epoch 29/100\n",
            "313/313 [==============================] - 23s 72ms/step - loss: 0.4260 - accuracy: 0.8051 - val_loss: 0.4367 - val_accuracy: 0.7952\n",
            "Epoch 30/100\n",
            "313/313 [==============================] - 22s 71ms/step - loss: 0.4245 - accuracy: 0.8062 - val_loss: 0.4415 - val_accuracy: 0.8016\n",
            "Epoch 31/100\n",
            "313/313 [==============================] - 23s 73ms/step - loss: 0.4255 - accuracy: 0.8062 - val_loss: 0.4409 - val_accuracy: 0.7892\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "D30HAciE6mzo",
        "outputId": "2bf66fd6-73da-485a-da31-fa3e54a39012"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.legend(['train', 'val'])\n",
        "plt.show()"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U8x7U3Vp6216"
      },
      "source": [
        "- **GRU** : LSTM 셀의 간소화된 버전\n",
        "\n",
        " LSTM 보다 가중치가 적어 계산량이 적지만 LSTM 못지않은 좋은 성능을 낸다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bHWkP_GP-C3h"
      },
      "source": [
        "# GRU 신경망 훈련하기\n",
        "model4 = keras.Sequential()\n",
        "model4.add(keras.layers.Embedding(500, 16, input_length=100))\n",
        "model4.add(keras.layers.GRU(8))\n",
        "model4.add(keras.layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p9s4kft3-T48",
        "outputId": "2604cc01-87cc-47a8-ab5b-a53637f2356e"
      },
      "source": [
        "model4.summary()"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_8\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_7 (Embedding)      (None, 100, 16)           8000      \n",
            "_________________________________________________________________\n",
            "gru (GRU)                    (None, 8)                 624       \n",
            "_________________________________________________________________\n",
            "dense_8 (Dense)              (None, 1)                 9         \n",
            "=================================================================\n",
            "Total params: 8,633\n",
            "Trainable params: 8,633\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tf8c9P69-Vmu",
        "outputId": "c50f7a12-3ae6-4b7d-ec05-162a81e0be3d"
      },
      "source": [
        "# 모델 컴파일, 훈련\n",
        "rmsprop = keras.optimizers.RMSprop(learning_rate=1e-4)\n",
        "model4.compile(optimizer=rmsprop, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-gru-model.h5')\n",
        "early_stopping_cb = keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True)\n",
        "history = model4.fit(train_seq, train_target, epochs=100, batch_size=64,\n",
        "                    validation_data=(val_seq, val_target),\n",
        "                    callbacks=[checkpoint_cb, early_stopping_cb])"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 14s 41ms/step - loss: 0.6926 - accuracy: 0.5227 - val_loss: 0.6917 - val_accuracy: 0.5382\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 12s 40ms/step - loss: 0.6904 - accuracy: 0.5612 - val_loss: 0.6893 - val_accuracy: 0.5536\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 0.6870 - accuracy: 0.5827 - val_loss: 0.6852 - val_accuracy: 0.5878\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.6814 - accuracy: 0.6125 - val_loss: 0.6786 - val_accuracy: 0.6116\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.6722 - accuracy: 0.6262 - val_loss: 0.6681 - val_accuracy: 0.6208\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.6569 - accuracy: 0.6464 - val_loss: 0.6506 - val_accuracy: 0.6418\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 12s 40ms/step - loss: 0.6316 - accuracy: 0.6684 - val_loss: 0.6194 - val_accuracy: 0.6774\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 0.5844 - accuracy: 0.7007 - val_loss: 0.5575 - val_accuracy: 0.7206\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.5145 - accuracy: 0.7490 - val_loss: 0.5084 - val_accuracy: 0.7544\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4892 - accuracy: 0.7681 - val_loss: 0.4928 - val_accuracy: 0.7680\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4746 - accuracy: 0.7773 - val_loss: 0.4815 - val_accuracy: 0.7742\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4638 - accuracy: 0.7854 - val_loss: 0.4731 - val_accuracy: 0.7786\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 13s 41ms/step - loss: 0.4547 - accuracy: 0.7908 - val_loss: 0.4668 - val_accuracy: 0.7802\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 0.4478 - accuracy: 0.7959 - val_loss: 0.4626 - val_accuracy: 0.7868\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4428 - accuracy: 0.7988 - val_loss: 0.4573 - val_accuracy: 0.7880\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4380 - accuracy: 0.8033 - val_loss: 0.4558 - val_accuracy: 0.7904\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4343 - accuracy: 0.8049 - val_loss: 0.4533 - val_accuracy: 0.7916\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 0.4309 - accuracy: 0.8074 - val_loss: 0.4503 - val_accuracy: 0.7936\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 0.4287 - accuracy: 0.8076 - val_loss: 0.4496 - val_accuracy: 0.7932\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4257 - accuracy: 0.8100 - val_loss: 0.4489 - val_accuracy: 0.7914\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4246 - accuracy: 0.8120 - val_loss: 0.4470 - val_accuracy: 0.7938\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4228 - accuracy: 0.8128 - val_loss: 0.4461 - val_accuracy: 0.7928\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4214 - accuracy: 0.8137 - val_loss: 0.4468 - val_accuracy: 0.7920\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 0.4202 - accuracy: 0.8124 - val_loss: 0.4533 - val_accuracy: 0.7930\n",
            "Epoch 25/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4192 - accuracy: 0.8141 - val_loss: 0.4441 - val_accuracy: 0.7940\n",
            "Epoch 26/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4174 - accuracy: 0.8134 - val_loss: 0.4436 - val_accuracy: 0.7940\n",
            "Epoch 27/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 0.4169 - accuracy: 0.8156 - val_loss: 0.4434 - val_accuracy: 0.7942\n",
            "Epoch 28/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 0.4165 - accuracy: 0.8140 - val_loss: 0.4435 - val_accuracy: 0.7948\n",
            "Epoch 29/100\n",
            "313/313 [==============================] - 12s 40ms/step - loss: 0.4157 - accuracy: 0.8152 - val_loss: 0.4459 - val_accuracy: 0.7890\n",
            "Epoch 30/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 0.4148 - accuracy: 0.8142 - val_loss: 0.4450 - val_accuracy: 0.7932\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "tDRe4jGi-uBy",
        "outputId": "3bf1daeb-f91f-44c1-bd54-dca21540d290"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.legend(['train', 'val'])\n",
        "plt.show()"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xVX0G3AX_SLl",
        "outputId": "d602d6fe-2d30-4ae3-da7a-e8423d24c595"
      },
      "source": [
        "# 가장 좋았던 모델에서 테스트 세트로 평가하기\n",
        "# 여기서는 2개의 순환층을 쌓은 모델로 적용\n",
        "test_seq = pad_sequences(test_input, maxlen=100)\n",
        "rnn_model = keras.models.load_model('best-2rnn-model.h5')\n",
        "rnn_model.evaluate(test_seq, test_target)"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "782/782 [==============================] - 11s 13ms/step - loss: 0.4349 - accuracy: 0.7973\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.4348558187484741, 0.7972800135612488]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    }
  ]
}
